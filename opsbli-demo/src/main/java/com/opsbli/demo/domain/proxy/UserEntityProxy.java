package com.opsbli.demo.domain.proxy;

import com.easy.query.core.expression.parser.core.available.TableAvailable;
import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.core.proxy.core.EntitySQLContext;
import com.opsbli.demo.domain.UserEntity;
import com.easy.query.core.proxy.columns.types.SQLIntegerTypeColumn;
import com.easy.query.core.proxy.columns.types.SQLStringTypeColumn;
import com.easy.query.core.proxy.columns.types.SQLLocalDateTimeTypeColumn;
import com.easy.query.core.proxy.columns.types.SQLBooleanTypeColumn;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 * 如果出现属性冲突请使用@ProxyProperty进行重命名
 *
 * @author easy-query
 */
public class UserEntityProxy extends AbstractProxyEntity<UserEntityProxy, UserEntity> {

    private static final Class<UserEntity> entityClass = UserEntity.class;

    public static final UserEntityProxy TABLE = createTable().createEmpty();

    public static UserEntityProxy createTable() {
        return new UserEntityProxy();
    }

    public UserEntityProxy() {
    }

    /**
     * {@link UserEntity#getId}
     */
    public SQLIntegerTypeColumn<UserEntityProxy> id() {
        return getIntegerTypeColumn("id");
    }

    /**
     * {@link UserEntity#getName}
     */
    public SQLStringTypeColumn<UserEntityProxy> name() {
        return getStringTypeColumn("name");
    }

    /**
     * {@link UserEntity#getBalance}
     */
    public SQLIntegerTypeColumn<UserEntityProxy> balance() {
        return getIntegerTypeColumn("balance");
    }

    /**
     * {@link UserEntity#getVersion}
     */
    public SQLIntegerTypeColumn<UserEntityProxy> version() {
        return getIntegerTypeColumn("version");
    }

    /**
     * {@link UserEntity#getCreateTime}
     */
    public SQLLocalDateTimeTypeColumn<UserEntityProxy> createTime() {
        return getLocalDateTimeTypeColumn("createTime");
    }

    /**
     * {@link UserEntity#getUpdateTime}
     */
    public SQLLocalDateTimeTypeColumn<UserEntityProxy> updateTime() {
        return getLocalDateTimeTypeColumn("updateTime");
    }

    /**
     * {@link UserEntity#getEnabled}
     */
    public SQLBooleanTypeColumn<UserEntityProxy> enabled() {
        return getBooleanTypeColumn("enabled");
    }

    /**
     * {@link UserEntity#getDeleted}
     */
    public SQLBooleanTypeColumn<UserEntityProxy> deleted() {
        return getBooleanTypeColumn("deleted");
    }

    /**
     * {@link UserEntity#getCompanyId}
     */
    public SQLIntegerTypeColumn<UserEntityProxy> companyId() {
        return getIntegerTypeColumn("companyId");
    }


    @Override
    public Class<UserEntity> getEntityClass() {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     *
     * @return
     */
    public UserEntityProxyFetcher FETCHER = new UserEntityProxyFetcher(this, null, SQLSelectAsExpression.empty);


    public static class UserEntityProxyFetcher extends AbstractFetcher<UserEntityProxy, UserEntity, UserEntityProxyFetcher> {

        public UserEntityProxyFetcher(UserEntityProxy proxy, UserEntityProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
            super(proxy, prev, sqlSelectAsExpression);
        }


        /**
         * {@link UserEntity#getId}
         */
        public UserEntityProxyFetcher id() {
            return add(getProxy().id());
        }

        /**
         * {@link UserEntity#getName}
         */
        public UserEntityProxyFetcher name() {
            return add(getProxy().name());
        }

        /**
         * {@link UserEntity#getBalance}
         */
        public UserEntityProxyFetcher balance() {
            return add(getProxy().balance());
        }

        /**
         * {@link UserEntity#getVersion}
         */
        public UserEntityProxyFetcher version() {
            return add(getProxy().version());
        }

        /**
         * {@link UserEntity#getCreateTime}
         */
        public UserEntityProxyFetcher createTime() {
            return add(getProxy().createTime());
        }

        /**
         * {@link UserEntity#getUpdateTime}
         */
        public UserEntityProxyFetcher updateTime() {
            return add(getProxy().updateTime());
        }

        /**
         * {@link UserEntity#getEnabled}
         */
        public UserEntityProxyFetcher enabled() {
            return add(getProxy().enabled());
        }

        /**
         * {@link UserEntity#getDeleted}
         */
        public UserEntityProxyFetcher deleted() {
            return add(getProxy().deleted());
        }

        /**
         * {@link UserEntity#getCompanyId}
         */
        public UserEntityProxyFetcher companyId() {
            return add(getProxy().companyId());
        }


        @Override
        protected UserEntityProxyFetcher createFetcher(UserEntityProxy cp, AbstractFetcher<UserEntityProxy, UserEntity, UserEntityProxyFetcher> prev, SQLSelectAsExpression sqlSelectExpression) {
            return new UserEntityProxyFetcher(cp, this, sqlSelectExpression);
        }
    }

}
